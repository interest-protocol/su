import { Kind as r, parse as n } from "@0no-co/graphql.web";

function initGraphQLTada() {
  function graphql(e, a) {
    var i = n(e).definitions;
    var t = new Set;
    for (var s of a || []) {
      for (var d of s.definitions) {
        if (d.kind === r.FRAGMENT_DEFINITION && !t.has(d)) {
          i.push(d);
          t.add(d);
        }
      }
    }
    if (i[0].kind === r.FRAGMENT_DEFINITION && i[0].directives) {
      i[0].directives = i[0].directives.filter((r => "_unmask" !== r.name.value));
    }
    return {
      kind: r.DOCUMENT,
      definitions: i
    };
  }
  graphql.scalar = function scalar(r, n) {
    return n;
  };
  graphql.persisted = function persisted(n) {
    return {
      kind: r.DOCUMENT,
      definitions: [],
      documentId: n
    };
  };
  return graphql;
}

function parse(r) {
  return n(r);
}

function readFragment(...r) {
  return 2 === r.length ? r[1] : r[0];
}

function maskFragments(r, n) {
  return n;
}

function unsafe_readResult(r, n) {
  return n;
}

var e = initGraphQLTada();

export { e as graphql, initGraphQLTada, maskFragments, parse, readFragment, unsafe_readResult };
//# sourceMappingURL=gql-tada.mjs.map
