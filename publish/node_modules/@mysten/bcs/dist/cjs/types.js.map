{
  "version": 3,
  "sources": ["../../src/types.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { BcsType } from './bcs-type.js';\n\n/**\n * Supported encodings.\n * Used in `Reader.toString()` as well as in `decodeStr` and `encodeStr` functions.\n */\nexport type Encoding = 'base58' | 'base64' | 'hex';\n\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n\t? { [K in keyof R]: R[K] }\n\t: never;\n\ntype RecursivelyReplacePlaceholder<\n\tT,\n\tR extends Record<string, unknown>,\n> = T extends GenericPlaceholder<infer K extends keyof R>\n\t? R[K]\n\t: T extends Record<string, unknown> | unknown[]\n\t? { [K in keyof T]: RecursivelyReplacePlaceholder<T[K], R> }\n\t: T extends Map<infer K, infer V>\n\t? Map<RecursivelyReplacePlaceholder<K, R>, RecursivelyReplacePlaceholder<V, R>>\n\t: T;\n\nconst bcsGenericPlaceholder = Symbol('bcsPlaceholder');\n\nexport interface GenericPlaceholder<T> {\n\t[bcsGenericPlaceholder]: T;\n}\n\nexport type ReplaceBcsGenerics<\n\tType extends BcsType<any>,\n\tNames extends readonly string[],\n\tTypes extends { [K in keyof Names]: BcsType<any> },\n> = Type extends BcsType<infer U, any>\n\t? BcsType<\n\t\t\tRecursivelyReplacePlaceholder<\n\t\t\t\tU,\n\t\t\t\tUnionToIntersection<\n\t\t\t\t\t{\n\t\t\t\t\t\t[K in keyof Names]: Types[K] extends BcsType<infer R, any>\n\t\t\t\t\t\t\t? { [K2 in Names[K]]: R }\n\t\t\t\t\t\t\t: never;\n\t\t\t\t\t}[number]\n\t\t\t\t>\n\t\t\t>,\n\t\t\tRecursivelyReplacePlaceholder<\n\t\t\t\tU,\n\t\t\t\tUnionToIntersection<\n\t\t\t\t\t{\n\t\t\t\t\t\t[K in keyof Names]: Types[K] extends BcsType<any, infer R>\n\t\t\t\t\t\t\t? { [K2 in Names[K]]: R }\n\t\t\t\t\t\t\t: never;\n\t\t\t\t\t}[number]\n\t\t\t\t>\n\t\t\t>\n\t  >\n\t: never;\n\nexport type InferBcsType<T extends BcsType<any>> = T extends BcsType<infer U, any> ? U : never;\nexport type InferBcsInput<T extends BcsType<any, any>> = T extends BcsType<any, infer U>\n\t? U\n\t: never;\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AA0BA,MAAM,wBAAwB,OAAO,gBAAgB;",
  "names": []
}
