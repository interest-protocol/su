import * as typescript from 'typescript';
import { CompilerHost, ScriptTarget, CreateSourceFileOptions, ResolvedModule } from 'typescript';
/*!@ts-ignore*/
import { IntrospectionQuery } from 'graphql';

declare function normalize(filename: string): string;

/** @internal */
declare function importModule(host: CompilerHost, id: string): Promise<void>;
/** @internal */
declare function importLib(host: CompilerHost): Promise<void>;
/** @internal */
declare function resolveModuleFile(from: string): Promise<string>;

/** @internal */
type VirtualCompilerHost = ReturnType<typeof createVirtualHost> & CompilerHost;
/** @internal */
declare const createProgram: (rootNames: string[], host: CompilerHost) => typescript.Program;
/** @internal */
declare function createVirtualHost(): {
  getCanonicalFileName: typeof normalize;
  getDefaultLibFileName(): string;
  getCurrentDirectory(): '/' | '\\';
  getNewLine(): string;
  getModuleResolutionCache(): typescript.ModuleResolutionCache;
  useCaseSensitiveFileNames(): true;
  fileExists(filename: string): boolean;
  directoryExists(directoryName: string): boolean;
  writeFile(filename: string, content: Uint8Array | string): void;
  getDirectories(directoryName: string): string[];
  readFile(filename: string): string | undefined;
  getSourceFile(
    filename: string,
    languageVersionOrOptions: ScriptTarget | CreateSourceFileOptions
  ): typescript.SourceFile | undefined;
  resolveModuleNames(moduleNames: string[], containingFile: string): (ResolvedModule | undefined)[];
};

declare function preprocessIntrospection({ __schema: schema }: IntrospectionQuery): string;

declare function minifyIntrospection(introspection: IntrospectionQuery): IntrospectionQuery;
interface OutputIntrospectionFileOptions {
  fileType: '.ts' | '.d.ts' | string;
  shouldPreprocess?: boolean;
}
declare function outputIntrospectionFile(
  introspection: IntrospectionQuery | string,
  opts: OutputIntrospectionFileOptions
): string;

declare const resolveTypeScriptRootDir: (
  readFile: (path: string) => string | undefined,
  tsconfigPath: string
) => string | undefined;

export {
  type VirtualCompilerHost,
  createProgram,
  createVirtualHost,
  importLib,
  importModule,
  minifyIntrospection,
  outputIntrospectionFile,
  preprocessIntrospection,
  resolveModuleFile,
  resolveTypeScriptRootDir,
};
